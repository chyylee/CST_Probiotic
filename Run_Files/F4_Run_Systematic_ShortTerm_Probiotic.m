%% F4_Run_Systematic_LactinV_Probiotic.m
%
% GOAL: Methodically test te effect of a variety of different probiotic 
% "strains" across an in silico population (matched for recurrent BV)
% 
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%% 1. SET-UP RUN INFORMATION

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% LOAD DEFAULT MODEL INPUTS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
clear; clc;
output_fdr = 'result_workspaces/';
ws_name = 'input_workspaces/SSConfig-Analysis-Virtual-Population.mat';
simulationType = "comboLV";
[POPinfo,PROBinfo,ABXinfo,~] = define_Common_Simulation_Inputs(ws_name,simulationType);
output_fdr_nm = 'result_workspaces/';

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% DEFINE STRAINS TO EVAUATE
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% newValueMat (previously defined by LHS)
%   NOTE: newValueMat is a # probiotic strains x 7 matrix  generated by LHS
load(ws_name,'newValueMat')

%% 2. SET-UP CLINICAL REGIMENS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% CREATE ABX/PROBIOTIC REGIMEN
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%   Requires input into structures for ABXinfo, PROBinfo, and POPinfo
%       - NOTE: POPinfo now has "SIMinfo" incorporated, rather than being
%               assigned it's own structure

[param_names,SSnms,sp_cols,time_names] = get_naming_terms();

wk = [1 1 1 1 1 1 1]; % wk 1: 1/day 4 days
customDosing = find(wk); % get numerical values
PROBinfo.custom = true;
PROBinfo.customProbDosing = customDosing;

ABXinfo.addABX = false; % true: administer ABX, false: no ABX

%% 3. RUN SYSTEMATIC ANALYSIS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% ITERATE THROUGH EACH STRAIN (computation ~10hrs)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

all_select_outcomes = NaN(size(newValueMat,1),length(POPinfo.Indexes),8+length(PROBinfo.customEvalPoints),5);
all_warnall = NaN(size(newValueMat,1),length(POPinfo.Indexes));
c = 0;
for combo_id = 1:size(newValueMat,1)
    tic
    disp(strcat("Combination #", num2str(combo_id)))
    PROBinfo.strainCharacteristics = newValueMat(combo_id,:);
    [select_outcomes, meanstdDuring, warnall, ...
        nonBVflag] = simulate_Clinical_Regimens_LV(ABXinfo,PROBinfo,POPinfo);

    all_select_outcomes(combo_id,:,:,:) = select_outcomes;
    all_warnall(combo_id,:) = warnall == "";

    % After ten runs, pause for 5 minutes
    disp(strcat("Combination #", num2str(combo_id)))
    if c == 10
        pause(60*5); c = 0;
    else
        c = c + 1;
    end
    toc

    % Saves results with each iteration (code takes ~10 hours to run,
    % protects against losing data)
    save('F4_Systematic_Acute_Probiotic.mat','all_warnall','all_select_outcomes','POPinfo','combo_id',...
        'newValueMat', 'PROBinfo','ABXinfo')
end

%% 4. Load workspace generated in Fig4_Systematic_LactinV_Probiotic.m
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PROCES AND VISUALIZE THE  RESULT
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
output_fdr_nm = 'result_workspaces/F4/';
load(strcat(output_fdr_nm,'F4_Systematic_ShortTerm_Probiotic.mat'))
    % all_select_outcomes: Numbers Strains x Simulated Patients x Time
    %       Points x [time point, nAB, Li, oLB, Probiotic] Abundance
    % all_warnall: Indicates runs without errors (1 = no error, 0 = error)
    % strainListLHS: Probiotic strain parameter values (Numbers Strains x
    %       Strain Parameters)
    % POPinfo: Structure with information on simulated population
    % PROBinfo: Structure with information about probiotic


%% 2. Pull Data of Strains at Lactin-V Evaluation Points
% NOTE: Lactin-V is evaluated at 12 weeks and 24 weeks after initial
% probiotic dosing. This corresponds to index 12 and 14 of
% all_select_outcomes

[param_names,SSnms,sp_cols,time_names] = get_naming_terms();
time_id = [5 8]; % 1mo or 12mo
numPatients = size(all_select_outcomes,2);
numStrains = size(strainListLHS,1);
numODEwarnings = sum(all_warnall==0,2);

errorThresh = 1; % must have a least one successful run (no ODE solver errors)

% collect information about response counts and frequencies
strainCounts1mo = NaN(numStrains,4);
strainFrequency1mo = NaN(numStrains,4);
strainCounts12mo = NaN(numStrains,4);
strainFrequency12mo = NaN(numStrains,4);

% loop through each "strain" (strainListLHS combination)
for strain_id = 1:numStrains
    warn_id = all_warnall(strain_id,:) == 1;
    if sum(warn_id) > errorThresh
        CST_post = get_CST_post(squeeze(all_select_outcomes(strain_id,warn_id,time_id(1),2:end)));
        Counts = [sum(CST_post == 1),sum(CST_post == 2),sum(CST_post == 3),sum(CST_post == 4)];
        Frequency = Counts ./ sum(Counts);
        strainCounts12(strain_id,:) = Counts;
        strainFrequency1mo(strain_id,:) = Frequency;

        CST_post = get_CST_post(squeeze(all_select_outcomes(strain_id,warn_id,time_id(2),2:end)));
        Counts = [sum(CST_post == 1),sum(CST_post == 2),sum(CST_post == 3),sum(CST_post == 4)];
        Frequency = Counts ./ sum(Counts);
        strainCounts12mo(strain_id,:) = Counts;
        strainFrequency12mo(strain_id,:) = Frequency;
    end
end
disp('Maximum Response Frequency 1mo: nAB, Li, oLB, Probiotic:')
disp(max(strainFrequency1mo))

disp('Maximum Response Frequency 12mo: nAB, Li, oLB, Probiotic:')
disp(max(strainFrequency12mo))


errorThresh = 500; % threshold for the number of successful runs 

%% BEST PROBIOTIC STRAINs
X = strainFrequency12mo; % or strainFrequency1mo
er_id = numODEwarnings <= errorThresh;

disp('Top Performing Strain - Percentatge of Subjects with nAB, Li, oLB, and P-dominance')
disp(prctile(X(er_id,:)*100,100))

sortThresh = prctile(X(er_id,:),90);

[~,Response_Label] = max(X,[],2);
Response_Label(isnan(X(:,1))) = -1;
bestStrains = cell(4,1);
for resp_id = 1:4
    ridx =  Response_Label == resp_id;
    eidx = numODEwarnings <= errorThresh;
    aidx = X(:,resp_id) > sortThresh(resp_id);

    selected_strains = strainListLHS(ridx & eidx & aidx,:);

    Xtmp = max(X(ridx & eidx & aidx,resp_id));

    bestStrains(resp_id) = {strainListLHS(ridx & eidx & X(:,resp_id) == Xtmp,:)};

    figure;
    subplot(1,4,1)
    boxchart(selected_strains(:,1));
    hold on
    x = repmat(1,size(selected_strains,1),1);
    s1 = swarmchart(x,selected_strains(:,1),[],'red','XJitterWidth',0.5);
    xticklabels(param_names(PROBinfo.strainCharIndexes(1)))
    ylabel('Parameter Value')
    title('Growth Term')
    
    subplot(1,4,[2,4])
    boxchart(selected_strains(:,2:end))
    hold on
    x = repmat(1:size(selected_strains,2)-1,size(selected_strains,1),1);
    s2 = swarmchart(x,selected_strains(:,2:end),[],'red','XJitterWidth',0.5);
    xticklabels(param_names(PROBinfo.strainCharIndexes(2:end)))
    ylabel('Parameter Value')
    hold on
    yline(0,'k')
    title('Interaction Terms')
    
    set(gcf,'units','pixels','position',[1 1 900 300])
end

save(strcat(output_fdr_nm,'F4_Systematic_ShortTerm_Probiotic.mat'),'bestStrains','-append')

%% RUN BEST STRAINS
bestStrain_select_outcomes = NaN(size(bestStrains,1),length(POPinfo.Indexes),8+length(PROBinfo.customEvalPoints),5);
bestStrain_all_warnall = NaN(size(bestStrains,1),length(POPinfo.Indexes));
for combo_id = 4:size(bestStrains,1)
    tic
    disp(strcat("Combination #", num2str(combo_id)))
    tmp = bestStrains{combo_id};
    if size(tmp,1) > 1
        sel_strain = tmp(1,:);
    else
        sel_strain = tmp;
    end
    PROBinfo.strainCharacteristics = sel_strain;
    [select_outcomes, meanstdDuring, warnall, ...
        nonBVflag] = simulate_Clinical_Regimens_LV(ABXinfo,PROBinfo,POPinfo);

    bestStrain_select_outcomes(combo_id,:,:,:) = select_outcomes;
    bestStrain_all_warnall(combo_id,:) = warnall == "";
end
%% 6. RUN PLS-DA
X = strainFrequency12mo; % or strainFrequency1mo

[~,lb] = max(X,[],2);
lb(isnan(X(:,1))) = -1;

prism_dat = [];
Xblock = [];
yblock = [];
c = 1;
for i = [1 2 3 4]
    tmp = strainListLHS(lb == i & numODEwarnings <= errorThresh,:);
    Xblock = [Xblock;tmp];
    yblock = [yblock;repmat(c,size(tmp,1),1)];
    c = c + 1;
end

% ~~~~~~~~ Uncomment to Compare BV+ / BV-
% yblock(yblock == 3) = 2;
% yblock(yblock == 4) = 2;
% classes = {'nAB','LB'};
% filettl = '___________-24wk-ST-BVefficacy';
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

classes = {'nAB','Li','oLB','P'};
ynames = param_names(PROBinfo.strainCharIndexes);
Yblock = dummyvar(yblock);
filettl = '___________-24wk-ST-ResponseTypes';
ttl = '';
yname = '';
ep = 1;
[plsda_model,cls_error,cls_error_CV,ellip_points] = fPLSDA(Xblock,...
    Yblock,ynames,filettl,classes,yname,ttl,1,ep);

%% Plot PLSDA

output_fdr = 'result_workspaces/F4/ST_PLSDA/';
ws_list = {'02-May-2023-12mo-ST-BVefficacy_PLSDA_Model.mat',...
    '02-May-2023-12mo-ST-ResponseTypes_PLSDA_Model.mat', ...
    '02-May-2023-1mo-ST-BVefficacy_PLSDA_Model.mat',...
    '02-May-2023-1mo-ST-ResponseTypes_PLSDA_Model.mat'};

[~,~,sp_cols,~] = get_naming_terms();
for i = 1:length(ws_list)
    load(strcat(output_fdr,ws_list{i}))

    ttl = strrep(extractBetween(ws_list{i},'2023-','_PLSDA'),'-'," ");
    filettl = '';
    
    if length(classes) == 2
        colors = [brighten(sp_cols(1,:),-0.5); 0 0.4470 0.7410];
    else
        colors = sp_cols;
    end

    plot_PLS(LV1_scores, LV2_scores, LV1_loads,LV2_loads,...
            yblock, scores_xlabel, scores_ylabel, loads_xlabel, loads_ylabel,...
            classes,  vip_xnames, "", ttl, filettl,...
            errortext,0, scores_num_LVs, ellip_points,colors);
end



%%
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% For copying andd pasting into PRISM (XY DATA)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
X = NaN(size(LV1_scores,1),length(classes)+1); % compile scores by response type
X(:,1) = LV1_scores;
E = NaN(size(ellip_points,2)*length(classes),length(classes)+1); % points to draw ellipses
c = 1;
for i = 1:length(classes)
    X(yblock(:,i) == 1,i+1) = LV2_scores(yblock(:,i) == 1);
    ep = c + size(ellip_points,2)-1;

    E(c:ep,1) = squeeze(ellip_points(i,:,1));
    E(c:ep,i+1) = squeeze(ellip_points(i,:,2));
    c = c + size(ellip_points,2);

end

% Re-order the PLS Loadings
[sorted_LVloads,i] = sort(LV2_loads);




     